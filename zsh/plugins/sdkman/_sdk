#compdef sdk
#autoload

# sdk zsh completion

#       install   or i    <candidate> [version]
#       uninstall or rm   <candidate> <version>
#       list      or ls   [candidate]
#       use       or u    <candidate> [version]
#       default   or d    <candidate> [version]
#       current   or c    [candidate]
#       upgrade   or ug   [candidate]
#       version   or v
#       broadcast or b
#       help      or h
#       offline           [enable|disable]
#       selfupdate        [force]
#       update
#       flush             <candidates|broadcast|archives|temp>

_sdk_commands() {
	local -a commands=(
	  {install,i}':install <candidate> [version]'
	  {uninstall,rm}':uninstall <candidate> [version]'
	  {list,l}':list [candidate]'
	  {use,u}':use <candidate> [version]'
	  {default,d}':set the default <candidate> [version]'
	  {current,c}':dispaly current <candidate>'
	  {upgrade,ug}':upgrade <candidate>'
	  {version,v}':display the current version of sdk'
	  {broadcast,b}':display the last broadcast message'
	  {help,h}':show the sdk help message'
	  'offline:set offline status [enable|disable]'
	  'selfupdate:update the sdk [force]'
	  'update:update sdk metadata't	  'flush:flush <candidates|broadcast|archives|temp>'
	)

	_describe -t commands "sdk commands" commands
}

_sdk_candidates() {
	local -a installed_candidates other_candidates
	
	installed_candidates=( $(_call_program - "/bin/ls $SDKMAN_CANDIDATES_DIR 2>/dev/null") )

	if [[ "$SDKMAN_AVAILABLE" != "false" ]]; then
		other_candidates=( "${(@s/,/)$(__sdkman_secure_curl ${SDKMAN_LEGACY_API}/candidates)}" )
	else
		other_candidate=( ${(@s/,/)$SDK_CANDIDATES_CSV} )
	fi
	
	if [[ $#installed_candidates -gt 0 ]]; then
		for i in $installed_candidates; do
			other_candidates[$other_candidates[(i)$i]]=()
		done

		_alternative \
			"installed-candidates:Installed Candidates:($installed_candidates)" \
			"other-candidates:Other Candidates:($other_candidates)"
	else
		_describe 'Candidates' other_candidates
	fi
}

_sdk_local_candidates() {
	local -a candidates=( $(_call_program path /bin/ls $SDKMAN_CANDIDATES_DIR 2>/dev/null) )
	_describe -t candidates "candidates" candidates
}

_sdk_versions() {
	local -a installed_versions other_versions
	local candidate="$words[2]"

	installed_versions=( "${(@s/,/)$(__sdkman_build_version_csv $candidate)}" )

	if [[ "$SDKMAN_AVAILABLE" != "false" ]]; then
		other_versions=( $(__sdkman_secure_curl ${SDKMAN_LEGACY_API}/candidates/$candidate/list | awk '/[0-9]+\.[0-9]+/ { print $1, $2, $3, $4 }') )

		if [[ $#installed_versions -gt 0 ]]; then
			for i in $installed_versions; do
				other_versions[$other_versions[(i)$i]]=()
			done

			case "$words[1]" in
				install|i)
					_message "Installed Versions: $installed_versions"
					_describe 'Available Versions' other_versions
					;;
				*)
					_alternative \
						"installed-versions:Installed Versions:($installed_versions)" \
						"other-versions:Other Versions:($other_versions)"
					;;
			esac
		else
			_describe 'Available Versions' other_versions
		fi
	else
		_message "sdk is offline"
	fi
}

_sdk_local_versions() {
	local candidate="$words[2]"
	local -a versions=( "${(@s/,/)$(__sdkman_build_version_csv $candidate)}" )

	if [[ -z "${versions[@]}" ]]; then
		_message "None installed!"
    else
		_describe -t versions "Installed Versions" versions
	fi
}

_sdk_complete() {
	local context state state_descr line
	typeset -A opt_args
	
	local -a flush_options offline_options selfupdate_options \
			candidates versions

	_arguments '1: :_sdk_commands' \
			   '*:: :_sdk_arguments' \
		&& return 0
}

_sdk_arguments() {
	case "$words[1]" in
		list|l)
			_arguments	'1:: :_sdk_candidates' && return 0
			;;

		upgrade|ug|current|c)
			_arguments	'1:: :_sdk_local_candidates' && return 0
			;;

		install|i|use|u)
			_arguments	'1: :_sdk_candidates' \
						'2:: :_sdk_versions' \
						&& return 0
			;;

		uninstall|rm)
			_arguments	'1: :_sdk_local_candidates' \
						'2: :_sdk_local_versions' \
						&& return 0
			;;

		default|d)
			_arguments	'1: :_sdk_local_candidates' \
						'2:: :_sdk_local_versions' \
						&& return 0
			;;
			
		offline)
			_arguments '1:offline options:(enable disable)' && return 0
			;;

		selfupdate)
			_arguments '1:selfupdate options:(force)' && return 0
			;;

		flush)
			_arguments '1:flush options:(candidates broadcast archives temp)' && return 0
			;;

		*)
			_message 'no more arguments' && return 0
			;;
	esac
}

_sdk_complete "$@"
