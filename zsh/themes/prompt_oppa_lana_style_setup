#
# Oh-my-git's oppa-lana-style theme implemented for prezto.
#

# Load dependencies.
pmodload 'helper'

# Gets the Git status information.
function git-info-extended {
  # Extended globbing is needed to parse repository status.
  setopt LOCAL_OPTIONS
  setopt EXTENDED_GLOB

  local added=0
  local added_format
  local added_formatted
  local deleted=0
  local deleted_format
  local deleted_formatted
  local deleted_indexed=0
  local deleted_indexed_format
  local deleted_indexed_formatted
  local dirty=0
  local dirty_format
  local dirty_formatted
  local ignore_submodules
  local -A info_formats formats
  local info_format
  local modified=0
  local modified_format
  local modified_formatted
  local modified_indexed=0
  local modified_indexed_format
  local modified_indexed_formatted
  local renamed=0
  local renamed_format
  local renamed_formatted
  local status_cmd
  local unmerged=0
  local unmerged_format
  local unmerged_formatted
  local untracked=0
  local untracked_format
  local untracked_formatted

  # Return if not inside a Git repository work tree.
  if ! is-true "$(command git rev-parse --is-inside-work-tree 2> /dev/null)"; then
    return 1
  fi

  # Ignore submodule status.
  zstyle -s ':prezto:module:git:status:ignore' submodules 'ignore_submodules'

  # Use porcelain status for easy parsing.
  status_cmd="command git status --porcelain --ignore-submodules=${ignore_submodules:-none}"

  # Get current status.
  while IFS=$'\n' read line; do
    # Count added, deleted, modified, renamed, unmerged, untracked, dirty.
    # T (type change) is undocumented, see http://git.io/FnpMGw.
    # For a table of scenarii, see http://i.imgur.com/2YLu1.png.
    [[ "$line" == A?\ * ]] && (( added++ ))
    [[ "$line" == ?D\ * ]] && (( deleted++ ))
    [[ "$line" == D?\ * ]] && (( deleted_indexed++ ))
    [[ "$line" == ?[MT]\ * ]] && (( modified++ ))
    [[ "$line" == [MT]?\ * ]] && (( modified_indexed++ ))
    [[ "$line" == R?\ * ]] && (( renamed++ ))
    [[ "$line" == (AA|DD|U?|?U)\ * ]] && (( unmerged++ ))
    [[ "$line" == \?\?\ * ]] && (( untracked++ ))
    (( dirty++ ))
  done < <(${(z)status_cmd} 2> /dev/null)

  # Format added.
  if (( added > 0 )); then
    zstyle -s ':prezto:module:git:info:added' format 'added_format'
    zformat -f added_formatted "$added_format" "a:$added"
  fi

  # Format deleted.
  if (( deleted > 0 )); then
    zstyle -s ':prezto:module:git:info:deleted' format 'deleted_format'
    zformat -f deleted_formatted "$deleted_format" "d:$deleted"
  fi

  # Format deleted_indexed.
  if (( deleted_indexed > 0 )); then
    zstyle -s ':prezto:module:git:info:deletedX' format 'deleted_indexed_format'
    zformat -f deleted_indexed_formatted "$deleted_indexed_format" "X:$deleted_indexed"
  fi

  # Format modified.
  if (( modified > 0 )); then
    zstyle -s ':prezto:module:git:info:modified' format 'modified_format'
    zformat -f modified_formatted "$modified_format" "m:$modified"
  fi

  # Format modified_indexed.
  if (( modified_indexed > 0 )); then
    zstyle -s ':prezto:module:git:info:modifiedX' format 'modified_indexed_format'
    zformat -f modified_indexed_formatted "$modified_indexed_format" "M:$modified_indexed"
  fi

  # Format renamed.
  if (( renamed > 0 )); then
    zstyle -s ':prezto:module:git:info:renamed' format 'renamed_format'
    zformat -f renamed_formatted "$renamed_format" "r:$renamed"
  fi

  # Format unmerged.
  if (( unmerged > 0 )); then
    zstyle -s ':prezto:module:git:info:unmerged' format 'unmerged_format'
    zformat -f unmerged_formatted "$unmerged_format" "U:$unmerged"
  fi

  # Format untracked.
  if (( untracked > 0 )); then
    zstyle -s ':prezto:module:git:info:untracked' format 'untracked_format'
    zformat -f untracked_formatted "$untracked_format" "u:$untracked"
  fi

  # Format info.
  zstyle -a ':prezto:module:git:info:keys-ext' format 'info_formats'
  for info_format in ${(k)info_formats}; do
    zformat -f REPLY "$info_formats[$info_format]" \
      "a:$added_formatted" \
      "d:$deleted_formatted" \
      "X:$deleted_indexed_formatted" \
      "m:$modified_formatted" \
      "M:$modified_indexed_formatted" \
      "r:$renamed_formatted" \
      "U:$unmerged_formatted" \
      "u:$untracked_formatted"
    formats[$info_format]="$REPLY"
  done

  zstyle ':prezto:module:git:info:keys' format "${(@fkv)formats}"
  git-info

  unset REPLY line

  return 0
}

function prompt_oppa_lana_style_async_git {
  cd -q "$1"
  if (( $+functions[git-info] )); then
    git-info-extended
    print ${git_info[status]}
  fi
}

function prompt_oppa_lana_style_async_tasks {
  # Initialize async worker. This needs to be done here and not in
  # prompt_oppa_lana_style_setup so the git formatting can be overridden by other prompts.
  if (( !${prompt_oppa_lana_style_async_init:-0} )); then
    async_start_worker prompt_oppa_lana_style -n
    async_register_callback prompt_oppa_lana_style prompt_oppa_lana_style_async_callback
    typeset -g prompt_oppa_lana_style_async_init=1
  fi

  # Kill the old process of slow commands if it is still running.
  async_flush_jobs prompt_oppa_lana_style

  # Compute slow commands in the background.
  async_job prompt_oppa_lana_style prompt_oppa_lana_style_async_git "$PWD"
}

function prompt_oppa_lana_style_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  _prompt_oppa_lana_style_pwd=$(prompt-pwd)

  # Run python info (this should be fast and not require any async)
  if (( $+functions[python-info] )); then
    python-info
  fi

  # Handle updating git data. We also clear the git prompt data if we're in a
  # different git root now.
  if (( $+functions[git-dir] )); then
    local new_git_root="$(git-dir 2> /dev/null)"
    if [[ $new_git_root != $_oppa_lana_style_cur_git_root ]]; then
      _prompt_oppa_lana_style_git=''
      _prompt_oppa_lana_style_no_git=''
      _oppa_lana_style_cur_git_root=$new_git_root
    fi
    if [[ -z "$new_git_root" ]]; then
      local format
      zformat -f format $prompt_oppa_lana_style_style_formats[no-git] "~:$_prompt_oppa_lana_style_pwd"
      _prompt_oppa_lana_style_no_git=format
      return
    fi
  fi

  prompt_oppa_lana_style_async_tasks
}

function prompt_oppa_lana_style_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent sp subst)
  _prompt_oppa_lana_style_precmd_async_pid=0
  _prompt_oppa_lana_style_precmd_async_data=$(mktemp "${TMPDIR:-/tmp}/oppa_lana_style-prompt-async-XXXXXXXXXX")

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz async && async

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_oppa_lana_style_precmd

  # Set editor-info parameters.
#   zstyle ':prezto:module:editor:info:completing' format '%B%F{7}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format ' %B%F{1}❯%F{3}❯%F{2}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format ' %F{3}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format ' %B%F{2}❮%F{3}❮%F{1}❮%f%b'
  zstyle ':prezto:module:prompt' pwd-length 'short'

  # Set python-info format
  zstyle ':prezto:module:python:info:virtualenv' format '%f%F{3}(%v)%F{7} '

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'no' # detailed info is collected by us
  zstyle ':prezto:module:git:info:action'    format '%s'
  zstyle ':prezto:module:git:info:added'     format '%a'
  zstyle ':prezto:module:git:info:ahead'     format '%A'
  zstyle ':prezto:module:git:info:behind'    format '%B'
  zstyle ':prezto:module:git:info:branch'    format '%b'
  zstyle ':prezto:module:git:info:commit'    format '%.7c'
  zstyle ':prezto:module:git:info:deleted'   format '%d'
  zstyle ':prezto:module:git:info:deletedX'  format '%X'
  zstyle ':prezto:module:git:info:renamed'   format '%r'
  zstyle ':prezto:module:git:info:modified'  format '%m'
  zstyle ':prezto:module:git:info:modifiedX' format '%M'
  zstyle ':prezto:module:git:info:position'  format '%p'
  zstyle ':prezto:module:git:info:stashed'   format '%S'
  zstyle ':prezto:module:git:info:unmerged'  format '%U'
  zstyle ':prezto:module:git:info:untracked' format '%u'
  zstyle ':prezto:module:git:info:clean'     format 'true'
  zstyle ':prezto:module:git:info:remote'    format '%R'
#  zstyle ':prezto:module:git:info:keys'      format 'status' '%b %p %c:%b:%S:%u:%m:%d:%a:%U:%c:%R:%A:%B:%p:%s:%C'
  zstyle ':prezto:module:git:info:keys-ext'  format 'status' '%b %p %c:%b:0%S:0%u:0%m:0%M:0%d:0%X:0%a:0%r:0%U:%c:%R:0%A:0%B:%p:%s:%C'


  typeset -gA prompt_oppa_lana_style_style_symbols prompt_oppa_lana_style_style_colors prompt_oppa_lana_style_style_formats
  local -A symbols colors formats

  local reset='%f%k%b'

  zstyle -a ':prezto:module:prompt:oppa-lana-style' symbols symbols
  zstyle -a ':prezto:module:prompt:oppa-lana-style' colors colors
  zstyle -a ':prezto:module:prompt:oppa-lana-style' prompt-formats formats

  # fill in defaults
  prompt_oppa_lana_style_style_symbols=(
    is_a_git_repo 			  ${symbols[is_a_git_rep]:-''}
    has_untracked_files 	  ${symbols[has_untracked_files]:-''}		#                ?    
    has_adds 				  ${symbols[has_adds]:-''}
    has_deletions 			  ${symbols[has_deletions]:-''}
    has_renames 			  ${symbols[has_renames]:-'➜'}
    has_cached_deletions 	  ${symbols[has_cached_deletions]:-''}
    has_modifications 		  ${symbols[has_modifications]:-''}
    has_cached_modifications  ${symbols[has_cached_modifications]:-''}
    ready_to_commit 		  ${symbols[ready_to_commit]:-''}			#   →
    is_on_a_tag 			  ${symbols[is_on_a_tag]:-''}				#   
    needs_to_merge 			  ${symbols[needs_to_merge]:-'ᄉ'}
    detached 				  ${symbols[detached]:-''}
    can_fast_forward 		  ${symbols[can_fast_forward]:-''}
    has_diverged 			  ${symbols[has_diverged]:-''}				#   
    not_tracked_branch 		  ${symbols[not_tracked_branch]:-''}
    rebase_tracking_branch 	  ${symbols[rebase_tracking_branch]:-''}	#   
    merge_tracking_branch 	  ${symbols[merge_tracking_branch]:-''}		# 
    should_push 			  ${symbols[should_push]:-''}				#   
    has_stashes 			  ${symbols[has_stashes]:-''}
  )

  prompt_oppa_lana_style_style_formats=(
    user            "${formats[user]:-${SSH_TTY:+'%F{9}%n%f%F{7}@%f%F{3}%m%f  '}}"
    directory       ''
    no-git          "${formats[no-git]:- %F{blue\}%k%b%~%f}"
#    prompt          ${formats[symbol]:-$'\n'%B${colors[prompt_background]:+%K{$colors[prompt_background]}}%(!.%F{1}.%F{${colors[prompt_foreground]:-white}})${symbols[prompt]:-'%#'}${reset}}
  )


  # Get the async worker set up
  _oppa_lana_style_cur_git_root=''
  _prompt_oppa_lana_style_git=''
  _prompt_oppa_lana_style_no_git=''
  _prompt_oppa_lana_style_pwd=''

  # Default is to show the return value
  if zstyle -T ':prezto:module:prompt' show-return-val; then
    local show_return="%? ${symbols[return]:-↵}"
  else
    local show_return="✘ "
  fi

  if zstyle -T ':prezto:module:prompt' show-directory; then
    local _fg=$(_color "${colors[directory_foreground]:-white}" f) _bg=$(_color "${colors[directory_background]:-blue}" k)
    local _fg2=$(_color "${colors[directory_background]:-blue}" f)

    prompt_oppa_lana_style_style_formats[directory]="${_fg}${_bg} %~ ${_fg2::=${_fg2//\[48;/[38;}}%K{white}"
  fi

  local prompt_symbol=${formats[symbol]:-$'\n'%B${colors[prompt_background]:+%K{$colors[prompt_background]}}%(!.%F{1}.%F{${colors[prompt_foreground]:-white}})${symbols[prompt]:-'%#'}${reset} }
#   local is_newline=false
#   [[ "${prompt_symbol:0:1}" == $'\n' ]] && is_newline=true

  # Define prompts.
  PROMPT='${_prompt_oppa_lana_style_no_git}${_prompt_oppa_lana_style_git}'
  PROMPT+=${prompt_symbol}
#   PROMPT+='${editor_info[keymap]} '

  RPROMPT='$python_info[virtualenv]${editor_info[overwrite]}  '
#  RPROMPT+=${user}
  RPROMPT+='%(?:: %F{1}'
  RPROMPT+=${show_return}
  RPROMPT+='%f)'

  SPROMPT='zsh: correct %F{1}%R%f to %F{2}%r%f [nyae]? '
}

function _color {
    if [[ ${1:0:1} == $'\e' ]]; then echo %{$1%}; else echo ${2:+%${(U)2}{$1}}; fi
}

function prompt_oppa_lana_style_preview {
  local +h PROMPT=''
  local +h RPROMPT=''
  local +h SPROMPT=''

  editor-info 2> /dev/null
  prompt_preview_theme 'oppa_lana_style'
}

function enrich_append {
  local flag=$1
  local symbol=$2
  local color=${3:-$omg_default_color_on}
  [[ -z "$flag" || $flag == false || $flag == 0 ]] && symbol=' '

  echo -n "${color}${symbol}  "
}

function prompt_oppa_lana_style_build_git_prompt {
  typeset -A symbols=( "${(@fkv)prompt_oppa_lana_style_style_symbols}" )

  local black_on_white="%F{black}%K{white}"
  local yellow_on_white="%F{yellow}%K{white}"
  local red_on_white="%F{red}%K{white}"
  local black_on_red="%F{black}%K{red}"
  local white_on_red="%F{white}%K{red}"
  local yellow_on_red="%F{yellow}%K{red}"
  local reset='%f%k%b'

  omg[upstream]=${omg[remote]//\/$omg[branch]/}
  omg[detached]=false
  omg[has_diverged]=false

  [[ ${omg[position]} == tags/* ]] && omg[tag]=${omg[position]#tags/}

  [[ "$omg[branch]" == 'HEAD' ]] && omg[detached]=true
  (( omg[ahead] > 0 && omg[behind] > 0 )) && omg[has_diverged]=true
  (( omg[ahead] == 0 && omg[behind] > 0 )) && omg[can_fast_forward]=true
  [[ $omg[has_diverged] == false && $omg[ahead] -gt 0 ]] && omg[should_push]=true

  local unstaged=$(( omg[modifications] + omg[deletions] + omg[untracked] ))
  local   staged=$(( omg[adds] + omg[modifications_cached] + omg[deletions_cached] ))

  (( staged > 0 && unstaged == 0 )) && omg[ready_to_commit]=true

  local dir
  zformat -f dir $prompt_oppa_lana_style_style_formats[directory] "~:$_prompt_oppa_lana_style_pwd"

  local prompt="${dir} ${black_on_white}  "

  # on filesystem (unstaged)

  prompt+=$(enrich_append true "$symbols[is_a_git_repo]" "$black_on_white")
  prompt+=$(enrich_append $omg[stashes] "$symbols[has_stashes]" "$yellow_on_white")

  prompt+=$(enrich_append $omg[untracked] "$symbols[has_untracked_files]" "$red_on_white")
  prompt+=$(enrich_append $omg[modifications] "$symbols[has_modifications]" "$red_on_white")
  prompt+=$(enrich_append $omg[deletions] "$symbols[has_deletions]" "$red_on_white")

  # ready (staged)

  prompt+=$(enrich_append $omg[adds] "$symbols[has_adds]" "$black_on_white")
  prompt+=$(enrich_append $omg[modifications_cached] "$symbols[has_cached_modifications]" "$black_on_white")
  prompt+=$(enrich_append $omg[deletions_cached] "$symbols[has_cached_deletions]" "$black_on_white")
  prompt+=$(enrich_append $omg[renames] "$symbols[has_renames]" "$black_on_white")

  # next operation

  prompt+=$(enrich_append $omg[ready_to_commit] "$symbols[ready_to_commit]" "$red_on_white")

  # where

  prompt+=" ${white_on_red} ${black_on_red}"

  if [[ -z "$omg[branch]" ]]; then
    prompt+=$(enrich_append true "$symbols[detached]" "$white_on_red")
    prompt+=$(enrich_append true "($omg[hash])" "$black_on_red")
  else
    if [[ -z "$omg[remote]" ]]; then
      prompt+=$(enrich_append true "-- $symbols[not_tracked_branch]  --  ($omg[branch])" "$black_on_red")
    else
      local will_rebase=$(command git config --get branch.${omg[branch]}.rebase 2> /dev/null)   # TODO: move to git-info-extended

      if [[ "$will_rebase" == true ]]; then
        local type_of_upstream=$symbols[rebase_tracking_branch]
      else
        local type_of_upstream=$symbols[merge_tracking_branch]
      fi

      if [[ $omg[has_diverged] == true ]]; then
        prompt+=$(enrich_append true "-$omg[behind] $symbols[has_diverged] +$omg[ahead]" "$white_on_red")
      else
        if [[ $omg[behind] -gt 0 ]]; then
          prompt+=$(enrich_append true "-$omg[behind] ${white_on_red}${symbols[can_fast_forward]}${black_on_red} --" "$black_on_red")
        elif [[ $omg[ahead] -gt 0 ]]; then
          prompt+=$(enrich_append true "-- ${white_on_red}${symbols[should_push]}${black_on_red}  +$omg[ahead]" "$black_on_red")
        else # [[ $omg[ahead] == 0 && $omg[behind] == 0 ]]; then
          prompt+=$(enrich_append true " --   -- " "$black_on_red")
        fi
      fi

      prompt+=$(enrich_append true "($omg[branch] ${type_of_upstream} $omg[upstream])" "$black_on_red")
    fi
  fi

#: ${omg_last_symbol_color:='%F{red}%k'}	# '\e[0;31m\e[40m'}

  prompt+=$(enrich_append "$omg[tag]" "$symbols[is_on_a_tag] $omg[tag]" "$black_on_red")
  prompt+="%F{red}%k$reset"
#	prompt+="${prompt_oppa_lana_style_style_formats[suffix]}"
#	prompt+="$(eval_prompt_callback_if_present)"
#	prompt+="${omg_second_line}"

  print -n "$prompt"
}

function prompt_oppa_lana_style_async_callback {
  case $1 in
    prompt_oppa_lana_style_async_git)
      unset omg
      typeset -gA omg
      local -a info
      local _git_target

      # We can safely split on ':' because it isn't allowed in ref names.
      IFS=':' read -A info <<< "$3"

      # The target actually contains 3 space separated possibilities, so we need to
      # make sure we grab the first one.
      _git_target=$info[1]
      _git_target=$(coalesce ${(@)${(z)_git_target}})

      shift info

      if [[ -z "$_git_target" ]]; then
        # No git target detected, flush the git fragment and redisplay the prompt.
        _prompt_oppa_lana_style_git=''
        _prompt_oppa_lana_style_no_git=$prompt_oppa_lana_style_style_formats[no-git]
        zle && zle reset-prompt
      else
        # Git target detected, update the git fragment and redisplay the prompt.

        omg=(
            branch                 "$info[1]"
            stashes                 $info[2]
            untracked               $info[3]
            modifications           $info[4]
            modifications_cached    $info[5]
            deletions               $info[6]
            deletions_cached        $info[7]
            adds                    $info[8]
            renames                 $info[9]
            unmerged                $info[10]
            hash                   "$info[11]"
            remote                 "$info[12]"
            ahead                   $info[13]
            behind                  $info[14]
            position               "$info[15]"
            action                 "$info[16]"
            clean                  "$info[17]"
        )

#         echo "${(@fkv)omg}"

        _prompt_oppa_lana_style_git="$(prompt_oppa_lana_style_build_git_prompt)"
        zle && zle reset-prompt
      fi
      ;;
  esac
}

prompt_oppa_lana_style_setup "$@"
